// Copyright 2016-2020, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// nolint: lll
package jvm

import (
	"text/template"
)

// TODO(pdg): parameterize package name
const javaSettingsFileText = `pluginManagement {
  repositories {
      maven { // The google mirror is less flaky than mavenCentral()
          url("https://maven-central.storage-download.googleapis.com/maven2/")
      }
      gradlePluginPortal()
  }
}

rootProject.name = "{{ .PackageName }}"
include("lib")`

var javaSettingsFileTemplate = template.Must(template.New("JavaSettings").Parse(javaSettingsFileText))

type javaSettingsFileTemplateContext struct {
	PackageName string
}

const javaBuildFileText = `plugins {
  id("java-library")
}

repositories {
  maven { // The google mirror is less flaky than mavenCentral()
      url("https://maven-central.storage-download.googleapis.com/maven2/")
  }
  mavenCentral()
  mavenLocal()
}

dependencies {
  testImplementation("junit:junit:4.13.1")
  implementation("com.google.code.gson:gson:2.7")
  implementation("com.google.code.findbugs:jsr305:3.0.2")
  implementation files("../../../../pulumi/sdk/jvm/pulumi/build/libs/pulumi.jar")
}
// version=rootProject.file('lib/src/main/resources/version.txt').text.trim()`

var javaBuildFileTemplate = template.Must(template.New("JavaBuild").Parse(javaBuildFileText))

type javaBuildFileTemplateContext struct {
}

// nolint:lll
const javaUtilitiesTemplateText = `// *** WARNING: this file was generated. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
package {{ .PackageName }};

import java.util.Optional;
import java.util.Set;

public class Utilities {
  public static <T> Optional<T> fallbackOptional(Optional<T> opt, Optional<T> fallback) {
    if (opt.isPresent()) {
      return opt;
    } else {
      return fallback;
    }
  }
	public static String version = formatVersion(Utilities.class.getResourceAsStream("/version.txt").toString());
	private static String formatVersion(String versionString) {
		String trimmed = versionString.trim();
		String[] parts = trimmed.split("\n");
		if (parts.length== 2) {
			return parts[1].trim();
		} else {
			return trimmed;
		}
	}

  public static Optional<String> getEnv(String... names) {
    for (String name : names) {
      String value = System.getenv(name);
      if (value != null) {
        return Optional.of(value);
      }
    }
    return Optional.empty();
  }

  static Set<String> trueValues = Set.of("1", "t", "T", "true", "TRUE", "True");
  static Set<String> falseValues = Set.of("0", "f", "F", "false", "FALSE", "False");
  public static Optional<Boolean> getEnvBoolean(String... names) {
    Optional<String> s = getEnv(names);
    return s.flatMap(v -> {
      if (trueValues.contains(v)) {
        return Optional.of(true);
      } else if (falseValues.contains(v)) {
        return Optional.of(false);
      } else return Optional.empty();
    });
  }

  public static Optional<Integer> getEnvInteger(String... names) {
    Optional<String> s = getEnv(names);
    return s.flatMap(v -> {
      try {
        return Optional.of(Integer.parseInt(v));
      } catch (NumberFormatException e) {
        return Optional.empty();
      }
    });
  }

  public static Optional<Double> getEnvDouble(String... names) {
    Optional<String> s = getEnv(names);
    return s.flatMap(v -> {
      try {
        return Optional.of(Double.parseDouble(v));
      } catch (NumberFormatException e) {
        return Optional.empty();
      }
    });
  }
}`

var javaUtilitiesTemplate = template.Must(template.New("JavaUtilities").Parse(javaUtilitiesTemplateText))

type javaUtilitiesTemplateContext struct {
	PackageName string
}

// nolint:lll
// TODO
const javaResourceTypeAnnotTemplateText = `// *** WARNING: this file was generated. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
package {{ .PackageName }};

protected sealed class {{.Name}}ResourceTypeAttribute extends io.pulumi.core.internal.annotations.ResourceTypeAttribute {
    String typ;
    String version default "";
}`

var javaResourceTypeAnnotTemplate = template.Must(template.New("JavaResourceTypeAnnot").Parse(javaResourceTypeAnnotTemplateText))

type javaResourceTypeAnnotTemplateContext struct {
	PackageName string
	Name        string
}
